Question 1.

Here are the results that running PAD on the first Padovan numbers gives:

[1]> (load "hw1.lsp")
;; Loading file hw1.lsp ...
;; Loaded file hw1.lsp
T
[2]> (PAD 0)
1
[3]> (PAD 1)
1
[4]> (PAD 2)
1
[5]> (PAD 3)
3
[6]> (PAD 4)
5
[7]> (PAD 5)
9
[8]> (PAD 6)
17
[9]> (PAD 7)
31
[10]> (PAD 8)
57
[11]> (PAD 9)
105
[12]> (PAD 10)
193

I have verified that these results are all correct by hand, therefore my 
function works as expected.  However, when testing my function with
(PAD 30), roughly 34 seconds passed from the time of hitting "Enter" to
the result being displayed.  When testing with (PAD 40), my impatience
got the better of me and I quit before it finished its evaluation.

This happens because of the structure of our recursive function.  Each
time we recursively call PAD, we must iterate through most numbers from
N down to 2 many many times because at no point do we use memoization to 
store these values.  As such, this function has an exponential time
complexity and will time out for larger numbers.


Question 2.

Here are the results that running SUMS on the first 10 values gives:

[2]> (SUMS 0)
0
[3]> (SUMS 1)
0
[4]> (SUMS 2)
0
[5]> (SUMS 3)
2
[6]> (SUMS 4)
4
[7]> (SUMS 5)
8
[8]> (SUMS 6)
16
[9]> (SUMS 7)
30
[10]> (SUMS 8)
56
[11]> (SUMS 9)
104
[12]> (SUMS 10)
192

Interestingly, we see that (PAD N) = (SUMS N) + 1.  This makes sense
because our PAD function relies entirely upon the idea of adding 1
several times to get the result.  In order to add x items together, one
needs to use addition (x-1) times.  And because we are adding only 1
each time, x = (PAD N) and (x-1) = (SUMS N).  Through substitution, we
then get (PAD N) = (SUMS N) + 1.


Question 3.

Here are the results that running ANON on the example trees give:

[2]> (ANON '42)
0
[3]> (ANON 'FOO)
0
[4]> (ANON '(((L E) F) T))
(((0 0) 0) 0)
[5]> (ANON '(5 FOO 3.1 -0.2))
(0 0 0 0)
[6]> (ANON '(1 (FOO 3.1) -0.2))
(0 (0 0) 0)
[7]> (ANON '(((1 2) (FOO 3.1)) (BAR -0.2)))
(((0 0) (0 0)) (0 0))
[8]> (ANON '(R (I (G (H T)))))
(0 (0 (0 (0 0))))

We see that our function does indeed return the correct results!
